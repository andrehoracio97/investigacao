https://dsp.stackexchange.com/questions/56321/gnu-radio-transceiver-loopback-adapted-transmission-stops-unexpectedly



https://www.gnuradio.org/doc/doxygen/page_packet_comms.html

TRANSMITTER:
Um transmtter de physical layer define-se com as seguintes propriedades:
	-Data integrity check - Normalmente o CRC32 do payload e juntado ao final do frame.

	-Forward Error Correction (FEC) - Correção de bit durante a rececão. -https://www.gnuradio.org/doc/doxygen/page_fec.html

	-Frame formatting: Esperamos os dados a serem recebido do tranmsissor por alguma camada acima (MAC/Rede), que é o que nos tratamos como o payload. A camada fisica de seguida, coloca o seu proprio framming de modo a transmitir corretamente a outros radios e estes receberem corretamente, isto envolve alguma info do formato do payload (como tamanho, tipo de FEC usado, tipo de modulacao e parametros da modulacao). ------>>>>>A frame fisica adiciona uma word conhecida para ajudar na identificação e sincronzação.<<<<-------
	A utilizacao do Packet Header Formatter block para isto. https://www.gnuradio.org/doc/doxygen/classgr_1_1digital_1_1header__format__base.html

	-O Protoccol formatter(aync) tem 2 outputs: "Header" que emite o header criado para o payload baseado no formatter object. e o "Payload" que é o input re-emitted.  PErmitindo assim 2 caminhos para modulação diferenciada e codificação FEC diferenciada. (FEC mais robusto no header para garantir receção, e menos no payload para maximizar throughput) 

	NOTA IMP: Se aplicarmos adicionarmos Access code no Header e aplicarmos o FEC ao header, então o AC é encoded tambem, temos que garantir que o reciver está à procura do AC corretamente. (NO packet_tx ao usar o repetition emcoder, o AC tem 3 bit por cada 1 que tinha, e o packet_rx tem que ter em conta isto no COrretaltion estimator  nessa word)

	-Modular, podemos criar um modulador tanto para o header como para o payload. 

	-Depois podemos juntar numa unica stream para o envio da mesma. (Com o bloco Tagged Stream Mux block)

	-Burst Shapping and Filtering: shapes the packet for burst transmission, 2 blocos para que isto aconteca corretamente.
	Manipula a estrutura do burst aplicando diferentes formas de padding. Primeiro existe uma janela que é aplicada ao dominio do tempo do burst. Isto involve ramping up stage de 0 e ramping down stage para 0. A window é definida como vetor e a fft.window define funcoes como seé Hann ou Kaiser. O tamanho da janela é dividido a meio, a parte da esquerda para ramp-up e a parte da direita para ramp-down. 
	A janela tem 2 modos: Inserir/Não inserir phasing symbols. 
		Quando se insere, uma sequencia de 1's e -1's são inseridos drante periodos ramp-up e ramp-down, assim uma janela com 20 de tamanho, irá produzir 10 1's e -1's alternativos á frente do burst e outros 10 simbolos alternativos atraz do burst. A window é aplicada aos simbolos de phase e não afeta os burst symbols diretamente.
		Quando não usamos os phasing symbols, a janela é aplicada á frente e a traz do burst diretamente.
	O Burst shapper pode, tambem adicionar 0's á frente e atraz do burst, permitindo mais controlo da estrutura do burst. em particular aidiconar post-padding 0's que é o comprimento do delay do pulse shapping filter que vem a seguir, isto garante que o burst completo das samples é empurrado para o filtro e transmitido completamente.
	                  ____________________
                     /                    \
                    /                      \
                   /                        \
            ______/                          \____
            |  E  | D |        C         | B | A |

  	A: Pre-padding 0's
  	B: Ramp-up window
 	C: Frame
	D: Ramp-down window
	E: Post-padding 0's


	Quando usamos hasing symbols: C é a frame inteira e B e D são cheios de 1's e -1's.
	Quando não usamos phase symbols a frame extende B atravez de C até D.

	EXEMPLOS STOCK: burst_tagger.grc

	Após isto colocamos o burst em pulse shapping filter. Este filtro modela complex samples em symbolos apropriados para transmissa baseado numa mascara espectral bem como up-samples do burst para o numero especificado de samples per second.   -->Polyphase Arbitrary Resampler, podemos assim especficar um valor de numero de SPS >=2. Um filtro tipico é o RRC (Root Raised Cosine) (TBM dá Gaussioan Filters).
	Como este filtro up-sample, usamos o Tagged Stream Multiply Length Tag block. O resamples não sabe de nada sobre tagged streams, por isso quando up-samples, o "tag value" dp TSB(tagged stream block) não altera, por isso temos que ser nos a alterar-lo. Isto ajuda principalmente quando estamos a usar UHD's e explicitmaente dizemos ao UHD Sink para experar uma tagged stream para gerir a transmissão em burst.


RECIVER:
É bem mais complicado na medida em que é involvido todo um conjunto de mecanismos de detenção e sincronização das frames recebidas. Assumindo que os bursys são potenencialmente com intervalos de tempo random.

É importante percbeer que é muito dificil fazer um simples protcolo funcional em todos os cenario, pois temos que assumir que os pacotes são perdidos ou porque não foi detetado o inicio ou pq de estatisticas de sincronização pobres durante o processo de burst.

	O FFL Band-Edge funciona bem mas é desnecessário caso os radio estao sincronizados na frequencia de alguma maneira (Ex com o GPSDO nos USRPs)

	Correlation estimator - O main flow das samples é detetar o frame com base na known word, que fronece tambem estimativas iniciais de timming e de phase offsets do recived frame. 

	Polyfase clock sync - Processigoms para o Clock Sync block para executar um matched filtering e sample time correcion para produzir samples a 1 sample por simbolo. 

	Header/Payload demux - Temos agora que dividir as samples em header/payload. Devemos ter informacao dentro do header que ajuda o reciver a perceber o pyload (por exemplo o tamanho do payload é normalmente codificado no header) 

	Caminho do Header - Assumimos que conhecemos o tamanho dos simbolos do header, conhecendo a modulacao do header sincronizamos em fase e em frequencia, demodulamos os simbolos em soft bits, descodificamoes esses soft bits com um FEC code e depois fazemos parse da informacao. Este parser extrai a info sobre o payload como numero de simbolos do payload e possivelmente o numero de vits/simbolo usado na modulacao do payload.

	Caminho do Payload - O HPD encia o numero de samples apropriadas para o caminho do payload, onde é executado sincronizacao de fase/frequencia a constelacao apropriada  utilizada no payload, decodes as samples em soft bits e executa FEC deconding, passando por CRC32 check. Caso passe, o payload é enviado para o hierblock comoum PDU com a physical layer stripped. 




BOLOCO A BLOCO
Correlation Estimator

	Numa primeira fase o reciver procura pela known word que foi adicionada aos bursts do transmittor. A known word passou por 2 fases de processamento: Encoding(como FEC-opcional) e modulada pelo modulador do header. Por isso temos que recrear a modulacao e possivelmente a codificacao da known word. Assin sendo coficamos a knwon word e depois modulamos (incluindo o pulse shapping filter), isto atravez do bloco Modulate vector onde tem como input o vetor a modular (neste caso o preambulo já com FEC encoded) e o modulador (que é recriado com o rxmod onde tem como inputs os samples per symbol, pulse shape filter bandwith) e é dado o resultado da knwon word modulada (modulated_sync_word) ao estimator block.

	Uma coisa complicadanas comunicacoes em burst e redes é que o power das samples recebidas é desconhecido e variavel no tempo. É preferivvel tentar a autodetecao do burst e escalar para +/-1 antes de ir ao packet_rx. Existe ainda muito trabalho a ser feito em AGC loops no hardware e scaling automatico em softwoare, o correlation estimator tenta tratar disto. Usamos um thresolh como uma probabilidade de aproximacao de detecao. Este valor deve ser definido como muito alto (defaul 99.9%)  

	Outra coisa que faz para nos é dar informacao sofre digital scaling samples.Quando recebidos pelo hardware os sinais tendem a ser pequenos, no entanto muito processamento à frente assume +/- 1. O Correlation estimator descobre a ambplitude da sample que o pico de correlacao foi encontrado e inverte-o, enviando-o com a tag "amp_est", que a podemos utilizar para down stream para ajustar a amplitude by rescalling as samples apartir deste valor com o bloco "Multiply by tag value" que multiplica baseado na tag.

	Finalmente, o main porpouse do Correlation estimator é providenciar o down-stream synchronization blocks com estimativas iniciais de offset de timmming e de fase. O pico de magnitude do evente de correlacao corresponde ao sampling time da data stream. 

	2 cenario de correlcao:
    1.   /\      2.   _
        /  \         / \
     __/    \__   __/   \__


     No cenario 1 o timming é exato e a sample no puco da curva é o sample time apropriado do ultimo simbolo da known word. No cenario 2 existe um offset de timming onde o offset correto de tempo está a uma distacnia de 2 samples. Aqui o timminf offser de 0.5/-0.5 conhecendo onde o offset estimado está ajuda o nosso recover block a comecar perto da sample correta e depois seguir-la apartir daí.

     A magnitude da correlacao ajuda-nos  descobrir o offset de tempo, a correlacao em si mesma é um vetor complexo. Por isso onde o pico de magnitude acontece podemos olhar par o valor complexo e a correlacao ao mesmo ponto e a diferenca entre a fase das partes reais do imaginarias é o offset de fase do nosso sinal.
     Calcula assim o time e phase offset e e cria tags "time_est" e "phase_est". 
     Tambem cria 2 tags "corr_start" e "corr_est", ambas contem o valor do pico da magnitude da correlacao pois existe um delay no algoritmo de correcao que é afetado pelo tamanho da correlcao, precisamos assim de ajustar onde o evento de correlacao ocorreu para onde as tags são realmente colodadas na output stream. O bloco coloca a tag "corr_start" na smaple onde a correlcacao realmente ocorreu. Depois coloca as outras 3 tags de offset em um "Tag marking delay" que é um valor calculado pelo utilizador para a colocação das tags no sitio correto da data stream onde foi o iniciio real do primeira known word symbol.









=========================================OUTROS SOBRE FEC===========================
https://www.gnuradio.org/doc/doxygen/page_fec.html

Tagged Stream Deployments

	GNU Radio's gr-fec also comes with simple deployments for Tagged Stream Blocks blocks. These deployments work similarly to the normal streaming deployments but fit into a tagged stream system by setting a tagged stream tag to control the frame size. Like all tagged stream blocks, they expect the tag to be located in the stream in order to properly function.

	The simplest form of the tagged stream deployments are just the C++ blocks gr::fec::tagged_encoder and gr::fec::tagged_decoder. These do not handle any input or output conversion. They expect the inputs to be already properly formatted for the encoding/decoding variables, and the outputs will be whatever the variable naturally produce.

	In the tagged stream deployments, the frame size set for a variable is no longer the static frame size like we expected in the streaming data implementations. Instead, we look at the frame size of the encoder/decoder variable during construction of the deployment as the maximum frame size, or a maximum transmission unit (MTU). This allows us to set up some internal memory to handle up to the required maximum length. When a tagged stream comes into this block, the frame size is then set based on that tagged stream information. If the frame is larger than the established MTU, a warning is sent out and the deployment only handles up to the MTU of the given frame.

	The extended Python tagged deployments, fec.extended_tagged_encoder and fec.extended_tagged_decoder, offer additional handling of the FEC API like we saw with the fec.extended_encoder and fec.extended_decoder. These extended deployments wrap up the puncturing and depuncturing as well as use the FEC API to do any input and output translation for the formatting of data streams. The fec.extended_tagged_encoder expects unpacked bits in and produces unpacked bits out. The fec.extended_tagged_decoder takes in floats (generally soft decisions from -1 to 1) and produces unpacked bits.

	See fec/fecapi_tagged_encoders.grc and fec/fecapi_tagged_decoders.grc in the installed examples for an example of how to work with these deployments given the three initial FEC coders available.



Convolutional Code Decoding class.

	This class performs convolutional decoding via the Viterbi algorithm. While it is set up to take variable values for K, rate, and the polynomials, currently, the block is only capable of handling the following settings:

	    K = 7
	    rate = 1/2 (given as 2 to the constructor)
	    polynomials = [109, 79]

	This is the well-known convolutional part of the Voyager code implemented in the CCSDS encoder.

	The intent of having this FECAPI code classes fully parameterizable is to eventually allow it to take on generic settings, much like the cc_encoder class where the CCSDS settings would be a highly-optimized version of this.

	The decoder is set up with a number of bits per frame in the constructor. When not being used in a tagged stream mode, this encoder will only process frames of the length provided here. If used in a tagged stream block, this setting becomes the maximum allowable frame size that the block may process.

	The mode is a cc_mode_t that specifies how the convolutional encoder will behave and under what conditions.

	    'CC_STREAMING': mode expects an uninterrupted flow of samples into the encoder, and the output stream is continually encoded. This mode is the only mode for this decoder that has a history requirement because it requires rate*(K-1) bits more to finish the decoding properly. This mode does not work with any deployments that do not allow history.

	    'CC_TERMINATED': is a mode designed for packet-based systems. This mode adds rate*(k-1) bits to the output as a way to help flush the decoder.

	    'CC_TAILBITING': is another packet-based method. Instead of adding bits onto the end of the packet, this mode will continue the code between the payloads of packets by pre-initializing the state of the new packet based on the state of the last packet for (k-1) bits.

	    'CC_TRUNCATED': a truncated code always resets the registers to the start_state between frames.




Parallelism
	The code variables in GNU Radio Companion have the ability to create multiple encoder/decoder variables by selecting the level of parallelism. It is up the encoder to understand how to handle the parallelism. The following discussion explains the difference between the two levels and how and when to use. Generally, normal applications will just use a single level of parallelism.

	The GRC variable declarations for the different coders has a setting for Parallelism, which can be either 1 or 2. If set to 1, then the resulting variable is a list of coder blocks with the same settings. If set to 2, then the resulting variable is a list of lists of coder blocks. The code that accepts these variables must understand how to handle the parallelism. Most applications would set this to 1.

	The standard fec.extended_encoder ("FEC Extended Encoder" in GRC) and fec.extended_decoder ("FEC Extended Decoder" in GRC) can handle a Parallelism of 1. They accept a list of coder variables as defined by Dimension 1 and can multithread the application based on the "Threading Type" setting:

	    None: does no parallel threading of the coders. Even if Dimension 1 is > 1, the encoder/decoder will ignore this setting and only use the first object in the list.

	    Ordinary: all "Dimension 1" number (N) of encoder/decoder blocks will be used in parallel. The hier_block2 will block deinterleave the packets into N streams (using gr::blocks::deinterleave with a value of blocksize as the frame length and no relative rate changes) and pass these to each of the N coders to process the frames in parallel. The output of each coder is then interleaved back together to make a single output stream.

	    Capillary: all "Dimension 1" number (N) of encoder/decoder blocks will be used in parallel, much like in the Ordinary mode. In this mode, however, the frames get split up in a tree-like fashion, where each branch launches 2 more branches. This means that N must be a factor of 2 for this mode to work. It tends to handle the load of the encoders/decoders better than the Ordinary mode.

	Note that the threading modes only work when using constant-length frames. If using the coders in tagged stream mode where the frame lengths may change, the Ordinary and Capillary modes are not available.

	The GRC example "ber_curve_gen.grc" uses a Parallelism of 2. This creates a list of lists of coders. The first dimension of the list corresponds to the number of Es/N0 values being used in the BER simulation. This allows the application to process all values of Es/N0 simultaneously. Dimension 2 in this case allows the same concept of parallelism discussed above with the None, Ordinary, and Capillary models of threading



