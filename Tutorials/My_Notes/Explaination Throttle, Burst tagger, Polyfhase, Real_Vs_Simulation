Throttle explanation (a little involved & probably more info than you really wanted to know ... ):

(1) When doing data streaming, we use buffers to hold the data between blocks. These buffers are (of course) finite in size; so before any block can do "work", it must check the amount of available input data and output buffer space. If there is not enough input data, or not enough output buffer space then no "work" takes place. We call this situation "backpressure".

(2) Flowgraphs can consist of combinations of streaming and messages. It is possible to use multiple of both in a single flowgraph, though one has to be careful in doing so! Both will, in general, process data as fast as possible without regard to desired or necessary sample rate; we generally just hope that the processing data rate is faster than the required sample rate & we call this "real time signal processing" if it is the case (and "offline" processing otherwise, since the processing can't keep up with the required data rate & thus would normally generate underruns).

(3) Certain sinks and sources provide data at a given sample rate; these include audio and UHD/USRP. We call such blocks "clocks", because they reliably provide or consume data at some given (and generally configurable) rate. In a single streaming flowgraph portion, most flowgraphs will have just a single such source or sink, because otherwise we have multiple clocks whose sample rates must be simultaneously met; this is called the "2 clock problem", and there is no good solution as of yet (there -are- solutions, but they are complicated & CPU intensive & not in the spirit of GR).

(4) If your flowgraph has no external clock via (3), then it generally should have a throttle to act as a clock. Without such flow control, the data in the flowgraph will move as quickly as the CPU can processing it, which if the flowgraph is complicated enough can result in the system seeming to hang / become non-responsive, since all available CPU time will be spent processing the flowgraph.

(5) When your flowgraph has a single clock -- regartdless of whether (3) or (4) -- and assuming processing is happening in (at least) real time, then you can visualize the data flowing through the buffers as a relatively continuous 2-dimensional plot: pipeline (moving throught the flowgraph) & waterfall (time), the "fullness" of which depends on how close to "real time" the processing is happening: if processing is -much- faster than the data rate, then the visualization is more of a pulse as the data moves through the flowgraph; as the data rate approaches the processing capabilities, the pulses become more of a continuous pipeline and thus more of a waterfall too. When the data rate is very close to the processing capabilities, the visualization is almost entirely filled up with data flowing across all blocks at all times, with just small gaps here and there.

(6) When doing data streaming for simulation purposes -- meaning with no clocks from (3) -- then instead of simulating the source/sink with a non-clocked input/output combined with a throttle, we generally move the throttle to a single spot where it can act for both input and output. The flowgraph up until the throttle will initially execute as quickly as the CPU and do processing, but eventually the backpressure will result in the average throughput being whatever the throttle is set at, via the pipeline in (5) being as full as possible with data & thus processing (1) happening only when possible. The flowgraph after the throttle will run like a normal clocked flowgraph as in (5).

(7) Multiple throttles are like multiple clocks from (3): they will compete for data and, since the clocks cannot be -exactly- the same data rate, the flowgraph will eventually either underrun or overflow, depending on which throttle is flowing faster.

(8) Thus, although it seems natural to create a virtual sink/source by using a throttle, it's generally not a good idea. Inserting a async message flowgraph so split the streaming into 2 parts may or not help with (7); really depends on what you're trying to do.


======================
DATA FLOW

(9) "Data streaming" makes one think of a very long stream of data being processed; so long that it for all practicaly purposes has no end. Most GNU Radio flowgraphs are designed with this concept in mind ... but, what if you just want to transfer a file, nothing more or less.

(10) For most packet-based communication systems, we take a payload and join it with a header and then maybe modulate the whole shebang. For small payloads, the ratio of header data to payload data is "high", while for large payloads, the ratio is "low". This means that a bigger payload is more efficient in terms of overhead used for a given amount of data transferred. The tradeoff for real-life communications is that the probability of a packet decoding error increases with a bigger payload.

(11) Hence, while we'd love to transfer a whole file as a single packet, it's really not realistic to do so, because the probability of the whole file successfully being decoded decreases as the payload length increases.

(12) Thus, we split the file into chunks of data, typically 4-7 times the header length in bytes, as a trade-off between wanting max payload length yet minimal probability of a packet decoding error. Many communications system have a set header:payload length ratio; some are variable.

(13) Inside GNU Radio, transferring a file results in the file being split into a finite number of packets via "stream to tagged stream" for length N input bytes. Inside this block, it will clump N input bytes into a tagged group. For an "infinite" stream, this isn't an issue ... N byte chunks keep getting clumped! But for a file of length not equal to M*N for M an integer, this block will output M-1 tagged stream chunks, then sit waiting for the residual data bytes to get to N ... that final M'th tagged stream chunk won't ever be output! Of course if the file length is exactly divisible by N, then this is OK.

(14) There is an "end of stream" setting that is used in GNU Radio, which indicates for those blocks that respond to it to finalize the block's processing given its current state & then propagate the command downstream in the flowgraph. Not all sources will generated this state, and not all blocks can use it. I'm pretty sure the "stream to tagged stream" block doesn't handle the state.

(15) For each tagged stream chunk on the Tx side: Because we're using tagged streams all the way from file split to full encoded packet output, all of the file data excepting possibly the final M'th tagged stream chunk will be exactly packetized and encoded.


======================
BURST SHAPPER

Here’s my understanding:
(2): The Burst Shaper is meant to change the bandwidth used for each output bit, as well as padding bursts to account for physically-determined characteristics such as multipath duration. Especially for your simulation, the Burst Shaper doesn’t really do very much, since you have effectively infinite BW; it is used for practical communication schemes, for example using a USRP Tx -> Rx and going fully wireless!
So if for your thesis you can just do simulations of channels, you don’t really need the Burst Shaper


POLYFHASE CLOCK SYNC

(1) Using the “Polyphase Clock Sync” and the “Costas Loop”  should work nicely. The former takes care of timing sync while the latter handles frequency sync. These are especially good for the simulated channel in your example right now, but I think they will also work nicely using a USRP Tx -> Rx and going fully wireless. Certainly worth trying.
The HPD does create an unnecessary cycle that just slows things down. Further, when there are close to continuous packets coming in, the HPD can totally lose it! Best to use something like what you’ve moved to.

======================
REAL PROBLEMS Vs SIMULATION


Before looking at what you’re doing, here are a few general comments about simulating a channel versus using actuals USRPs to form a wireless channel.
In simulation, there is no real bandwidth limits not saturation limits. In Real Life (IRL: using a USRP), you have both.
The bandwidth probably won’t be a major issue for you since you’re using the burst shaper, which will limit the BW occupied by the signal. That said, if you have a spectrum analyzer that you can tune to the RF channel you’re using with the USRPs, it should show how the BW is actually being used & might show some out-of-band (OOB) emissions. If so, lock down the burst shaper with a filter that’s tighter in BW.
Saturation is where the issue often come IRL: you want the signal going to the USRP sink to be floating point and in [-1, +1]. Anything < -1 or > +1 will cause the signal the be saturated & be nonlinear, which is not desirable. An occasional value outside isn’t generally a big deal, but values consistently outside will cause all sorts of IRL issues & the Rx will probably fail.
This [-1,+1] is -before- the USRP sink, regardless of the USRP gain settings.
I generally put in a gain slider & Qt sink & play with the slider to get an idea of the pre-USRP gain value.
THEN: You also need the USRP gain values — both Tx and Rx — to be high enough so that the Rx signal has enough signal-to-noise (SNR) to be decoded.
So: 3 gain sliders & 3 Qt sinks to show what’s going on!
Once you find good values, you can just hardwire them, and things should work then so long as you don’t change the overall Tx / Rx in any significant capacity.
OK … so, now I’ll look at you GRC FGs & see what you’ve been up to!


If you add a Qt Time Sink to the line that feeds into the USRP sink and then execute the FG, you’ll see that the time values of the signal are nearly within [-1,+1], but maybe 50% of the time they are outside that bound.
You want the values being fed to the USRP sink to be within [-1,+1] … so, you need to add a “gain” block before the USRP sink and set the gain value to maybe 0.8 … an attenuation, in order to get the values provided to the USRP to be within those expected.

=========BURST tagger asked by fmago:


fmagno 12:46 AM
awalls: I think you're talking about the pulse shaper. I'm asking about the burst shaper which adds padding before and after a burst: https://wiki.gnuradio.org/index.php/Burst_Shaper
Why is this padding and ramping useful? I suppose it facilitates the reception somehow. How exactly?

awalls (IRC)APP 12:48 AM
nope, Im talking about a burst of symbols, not a single symbol
it's about not splattering energy all overy the spectrum with a sharp rise and fall
the sharp leading and trailing edge of an unshaped burst contains lots of high frequency components.
The shaping reduces that.

fmagno 12:50 AM
But if each symbol is already pulse shaped is the burst going to produce spectrum outside the desired band?

awalls (IRC)APP 12:50 AM
yes
Make a simulation in Matlab or Octave and see for yourself by running an FFT on the initial part of the burst
I usually use a Tukey window over an FSK burst
fmagno 12:54 AM
Interesting, that was the bit I wasn't getting. But I think I am understanding. If we draw an envelop around the burst without burst shaping there will be a sharp change at the beginning and end of the burst. It becomes visible if we zoom out
Thanks a lot

fmagno 1:09 AM
Hmm, I may be making some wrong assumptions though. Let's consider the following scenarios:
1. [Burst]----[Burst]----[Burst]----[Burst]
2. [Burst][Burst][Burst][Burst]
3. <Burst>----<Burst>----<Burst>
Where ---- means silence and <, > are ramps.
Does 1. and 2. produce out of band spectrum?
And is 1. better than 2. ?

awalls (IRC)APP 2:01 AM
There's a practical matter of keying up the power amplifier too.
but fast edges produce spectral components farther out from the center frequency than ramps.
so 1 is the worst.  2 is bad too.  3. is preferred.
and the PA should be keyed on shortly before the burst and keyed off shortly after the burst.
PA's cant have keying glitch transients, so an RF switch curcuit to isolate the PA output from the antenna may also be needed.
*can have
It turns out building a real transmitter to meet spectral masks is a bit of a hassle. :P 

@fmagno Assume those bursts are properly filtered, they should have a 'ramp up' and 'ramp down'. If they are just cut off at the beginning and at the end, I'd actually argue that both 1 and 2 are equally bad.

fmagno 9:18 AM
@jdemel from a practical stand point I think I understand the impact of keying on/off the PA without ramping up/down (situation 1.), on the other hand if I look at the spectrum of the baseband signal (situation 2.), after only pulse shaping, I can see that it is well bounded. Theoretically I don’t see why the burst shaping should be required for 2., for example.

jdemel 9:47 AM
@fmagno if you refer to the burst shaper block, it does a few things with your signal. I just recall I tried to use it once and did not succeed in making it do what I want. Do you refer to a simulated flowgraph or do you transmit and record?

fmagno 9:55 AM
@jdemel I am looking at the signal still in the realm of the digital machine, before iq modulation, right after the pulse shaping.
I should then look at the transmitted signal to see if my predictions comply but for now I am trying to create an expectation on what should be happening.
So, my setup includes in the TX part these operations:
[dig mod] > [pulse shaping] > [  x  ] > [I/Q mod]
Would it be better to place a [burst shaper] at [  x  ]  even for situation 2. that has no silences (sharp edges) between bursts?
(After [pulse shaping] the spectrum is very well bounded) (edited) 

awalls (IRC)APP 10:10 AM
the bottom line is you use the tools and techniques required to meet your spectral mask (with some margin) at the Tx antenna output port of your radio set. end
if you can get by without burst shaping then you don't need to implement it

awalls (IRC)APP 10:17 AM
There's also transient overshoot in the time domain to consider, but that is often not an issue unless you also have power envelope requirement.

fmagno 10:17 AM
awalls: I understand your practical approach and I agree with you. But in this case I’m seeking some better understanding on what circumstances burst_shaper may be needed.
For example, let’s consider I remove all the silences between bursts (situation 2.), I believe I no longer would be concerned about keying on/off my PA because it is always on. I would conclude a burst_shaper wouldn’t be needed here, unless I’m missing some other effect. (edited) 

fmagno 10:23 AM
this also raises another question that is, why do I need to split my symbols into burst, in the first place?
awalls (IRC)APP 10:36 AM
if your PA is always on, when you have no RF to send, your PA will be amplifying and transmitting the noise coming out of your exciter.
not a nice thing to do for other users of that channel.
also, if you aren't using fdm for tx/rx then you will be degrading your own receiver.
an Rf switch between tx and rx for a shared antenna may only provide about 40 dB of isolation
you use bursts when you need to share the channel with other transmitters, which is very common for over the air transmission

jdemel 10:47 AM
My experience with over the air transmissions is, that you can see a sine in your received signal if you only transmit 0. This might be less of an issue if you increase the distance between TX and RX but it is definitely an issue.
@fmagno What does your IQ mod do? Is this your device that maps I and Q to cosine and sine for upconversion? To be honest, the term 'modulation' is used in so many different context in communications engineering that it leads to a lot of confusion because its meaning is based on context.

fmagno 11:11 AM
Is this your device that maps I and Q to cosine and sine for upconversion
@jdemel This is what I mean by iq mod, exactly. (edited) 

fmagno 11:19 AM
awalls: so, let’s say I only require to transmit N symbols encoding some message, and nothing else, and I am not worried about sharing that channel with others. Would situation 2. with this little change be the best approach?
----<[N symbols]>----
(no splitting my message into bursts and only adding a ramp at the beggining and the end of the message)

awalls (IRC)APP 11:52 AM
then this is totally academic: no one cares about your spectrum, you don't care to share the channel, so transmit whatever signal spectrum you want.
Your not building a lasting digital communications system at that point.
It's just an academic toy with no real world requirements.

awalls (IRC)APP 12:01 PM
Burst shaping is a technique to satisfy real world issued of spectrum compliance on a shared medium/channel.
It is not required given your stated scenario.

fmagno 12:04 PM
awalls: thanks, that answer is exactly what I was looking for